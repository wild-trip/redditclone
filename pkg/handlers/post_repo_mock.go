// Code generated by MockGen. DO NOT EDIT.
// Source: posts.go

// Package handlers is a generated GoMock package.
package handlers

import (
	gomock "github.com/golang/mock/gomock"
	bson "gopkg.in/mgo.v2/bson"
	posts "reddit/pkg/posts"
	user "reddit/pkg/user"
	reflect "reflect"
)

// MockPostsRepositoryInterface is a mock of PostsRepositoryInterface interface
type MockPostsRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostsRepositoryInterfaceMockRecorder
}

// MockPostsRepositoryInterfaceMockRecorder is the mock recorder for MockPostsRepositoryInterface
type MockPostsRepositoryInterfaceMockRecorder struct {
	mock *MockPostsRepositoryInterface
}

// NewMockPostsRepositoryInterface creates a new mock instance
func NewMockPostsRepositoryInterface(ctrl *gomock.Controller) *MockPostsRepositoryInterface {
	mock := &MockPostsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPostsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostsRepositoryInterface) EXPECT() *MockPostsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockPostsRepositoryInterface) GetAll() ([]*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockPostsRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).GetAll))
}

// GetCategory mocks base method
func (m *MockPostsRepositoryInterface) GetCategory(arg0 string) ([]*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0)
	ret0, _ := ret[0].([]*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory
func (mr *MockPostsRepositoryInterfaceMockRecorder) GetCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).GetCategory), arg0)
}

// GetByID mocks base method
func (m *MockPostsRepositoryInterface) GetByID(arg0 bson.ObjectId) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockPostsRepositoryInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).GetByID), arg0)
}

// GetByUserLogin mocks base method
func (m *MockPostsRepositoryInterface) GetByUserLogin(arg0 string) ([]*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserLogin", arg0)
	ret0, _ := ret[0].([]*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserLogin indicates an expected call of GetByUserLogin
func (mr *MockPostsRepositoryInterfaceMockRecorder) GetByUserLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserLogin", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).GetByUserLogin), arg0)
}

// Add mocks base method
func (m *MockPostsRepositoryInterface) Add(arg0 *user.User, arg1, arg2, arg3, arg4, arg5 string) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockPostsRepositoryInterfaceMockRecorder) Add(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).Add), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AddComment mocks base method
func (m *MockPostsRepositoryInterface) AddComment(arg0, arg1 bson.ObjectId) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment
func (mr *MockPostsRepositoryInterfaceMockRecorder) AddComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).AddComment), arg0, arg1)
}

// UpViews mocks base method
func (m *MockPostsRepositoryInterface) UpViews(arg0 bson.ObjectId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpViews", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpViews indicates an expected call of UpViews
func (mr *MockPostsRepositoryInterfaceMockRecorder) UpViews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpViews", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).UpViews), arg0)
}

// DeleteComment mocks base method
func (m *MockPostsRepositoryInterface) DeleteComment(arg0, arg1 bson.ObjectId) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockPostsRepositoryInterfaceMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).DeleteComment), arg0, arg1)
}

// Upvote mocks base method
func (m *MockPostsRepositoryInterface) Upvote(arg0 *user.User, arg1 bson.ObjectId) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upvote", arg0, arg1)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upvote indicates an expected call of Upvote
func (mr *MockPostsRepositoryInterfaceMockRecorder) Upvote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upvote", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).Upvote), arg0, arg1)
}

// Downvote mocks base method
func (m *MockPostsRepositoryInterface) Downvote(arg0 *user.User, arg1 bson.ObjectId) (*posts.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Downvote", arg0, arg1)
	ret0, _ := ret[0].(*posts.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Downvote indicates an expected call of Downvote
func (mr *MockPostsRepositoryInterfaceMockRecorder) Downvote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Downvote", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).Downvote), arg0, arg1)
}

// Delete mocks base method
func (m *MockPostsRepositoryInterface) Delete(arg0 bson.ObjectId) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPostsRepositoryInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostsRepositoryInterface)(nil).Delete), arg0)
}

// MockCommentsRepositoryInterface is a mock of CommentsRepositoryInterface interface
type MockCommentsRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommentsRepositoryInterfaceMockRecorder
}

// MockCommentsRepositoryInterfaceMockRecorder is the mock recorder for MockCommentsRepositoryInterface
type MockCommentsRepositoryInterfaceMockRecorder struct {
	mock *MockCommentsRepositoryInterface
}

// NewMockCommentsRepositoryInterface creates a new mock instance
func NewMockCommentsRepositoryInterface(ctrl *gomock.Controller) *MockCommentsRepositoryInterface {
	mock := &MockCommentsRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCommentsRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommentsRepositoryInterface) EXPECT() *MockCommentsRepositoryInterfaceMockRecorder {
	return m.recorder
}

// NewComment mocks base method
func (m *MockCommentsRepositoryInterface) NewComment(arg0 *user.User, arg1 string) (bson.ObjectId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewComment", arg0, arg1)
	ret0, _ := ret[0].(bson.ObjectId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewComment indicates an expected call of NewComment
func (mr *MockCommentsRepositoryInterfaceMockRecorder) NewComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewComment", reflect.TypeOf((*MockCommentsRepositoryInterface)(nil).NewComment), arg0, arg1)
}

// GetByID mocks base method
func (m *MockCommentsRepositoryInterface) GetByID(arg0 bson.ObjectId) (*posts.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*posts.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockCommentsRepositoryInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCommentsRepositoryInterface)(nil).GetByID), arg0)
}

// DelComment mocks base method
func (m *MockCommentsRepositoryInterface) DelComment(arg0 bson.ObjectId) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelComment", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelComment indicates an expected call of DelComment
func (mr *MockCommentsRepositoryInterfaceMockRecorder) DelComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelComment", reflect.TypeOf((*MockCommentsRepositoryInterface)(nil).DelComment), arg0)
}
